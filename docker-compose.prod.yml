name: telegram-userbot

services:

  nginx:
    container_name: telegram_userbot_nginx
    depends_on:
      - backend
    image: nginx:stable-alpine
    ports:
      - ${BACKEND_PORT}:80
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./backend/public:/telegram-userbot/backend/public
      - ./shared/var/log/nginx:/var/log/nginx
    networks:
      - telegram-userbot-network

  backend:
    container_name: telegram_userbot_backend
    depends_on:
      - bot-manager
      - alloy
    build:
      dockerfile: backend/Dockerfile
      target: prod
    environment:
      APP_ENV: ${APP_ENV}
    entrypoint: [bin/entrypoint.sh]
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    volumes:
      - ./shared/var/log:/telegram-userbot/shared/var/log
    networks:
      - telegram-userbot-network

  bot-manager:
    container_name: telegram_userbot_bot_manager
    depends_on:
      - redis
      - bot
      - alloy
    build:
      dockerfile: bot-manager/Dockerfile
      target: prod
    environment:
      APP_ENV: ${APP_ENV}
      SUPERVISOR_USER: ${SUPERVISOR_USER}
      SUPERVISOR_PASSWORD: ${SUPERVISOR_PASSWORD}
    tty: true
    entrypoint: [bin/entrypoint.sh]
    volumes:
      - ./shared/var/log:/telegram-userbot/shared/var/log
    networks:
      - telegram-userbot-network

  bot:
    container_name: telegram_userbot_bot
    depends_on:
      - redis
      - alloy
    build:
      dockerfile: bot/Dockerfile
      target: prod
    environment:
      APP_ENV: ${APP_ENV}
      SUPERVISOR_USER: ${SUPERVISOR_USER}
      SUPERVISOR_PASSWORD: ${SUPERVISOR_PASSWORD}
    tty: true
    entrypoint: [bin/entrypoint.sh]
    volumes:
      - ./shared/var/log:/telegram-userbot/shared/var/log
    networks:
      - telegram-userbot-network

  redis:
    container_name: telegram_userbot_redis
    image: redis:8-alpine
    command: [redis-server, /usr/local/etc/redis/redis.conf]
    user: redis
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
      - ./shared/var/log/redis:/var/log/redis
      - telegram-userbot-redis:/data
    networks:
      - telegram-userbot-network

  postgres:
    container_name: telegram_userbot_postgres
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - ${POSTGRES_PORT}:${DB_PORT}
    volumes:
      - telegram-userbot-db:/var/lib/postgresql/data
    networks:
      - telegram-userbot-network

  # Centralised logging services
  loki:
    depends_on:
      - alloy
    container_name: telegram_userbot_loki
    image: grafana/loki:latest
    networks:
      - telegram-userbot-grafana-network

  alloy:
    container_name: telegram_userbot_alloy
    image: grafana/alloy:latest
    entrypoint: [/bin/sh]
    command: -c "alloy run /etc/alloy/config.alloy > /var/log/alloy.log 2>&1"
    volumes:
      - ./alloy/config.alloy:/etc/alloy/config.alloy
      # Make a reference in the shared var log to the internal alloy log
      - ./shared/var/log/alloy:/var/log
      # Mount the whole shared log directory (including the previous alloy log) to the container using a full path,
      # use full paths inside config.alloy to reference the log files to collect
      - ./shared/var/log:/telegram-userbot/shared/var/log
    networks:
      - telegram-userbot-grafana-network

  grafana:
    container_name: telegram_userbot_grafana
    depends_on:
      - loki
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_SECURITY_ADMIN_PASSWORD}
    ports:
      - ${GRAFANA_PORT}:3000
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - telegram-userbot-grafana-network

volumes:
  telegram-userbot-db:
  telegram-userbot-redis:

networks:
  telegram-userbot-network:
  telegram-userbot-grafana-network:
