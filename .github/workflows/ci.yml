name: CI

# Unit testing, code static analysis and linting
# It depends on the Docker images being published on the GHCR

on:
  workflow_run:
    workflows: ["GHCR"]
    types:
      - completed

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Log in to GHCR
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Install backend dependencies
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/backend:/telegram-userbot/backend \
            -v ${{ github.workspace }}/shared:/telegram-userbot/shared \
            -w /telegram-userbot/backend \
            ghcr.io/olml89/telegram-userbot-backend:dev \
            composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Install bot dependencies
        run: |
          docker run --rm \
          -v ${{ github.workspace }}/bot:/telegram-userbot/bot \
          -v ${{ github.workspace }}/shared:/telegram-userbot/shared \
          -w /telegram-userbot/bot \
          ghcr.io/olml89/telegram-userbot-bot:dev \
          composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Install bot-manager dependencies
        run: |
          docker run --rm \
          -v ${{ github.workspace }}/bot-manager:/telegram-userbot/bot-manager \
          -v ${{ github.workspace }}/shared:/telegram-userbot/shared \
          -w /telegram-userbot/bot-manager \
          ghcr.io/olml89/telegram-userbot-bot-manager:dev \
          composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Install shared dependencies
        run: |
          docker run --rm \
          -v ${{ github.workspace }}/shared:/telegram-userbot/shared \
          -w /telegram-userbot/shared \
          ghcr.io/olml89/telegram-userbot-shared:latest \
          composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Install dev dependencies
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/telegram-userbot \
            -w /telegram-userbot/dev \
            ghcr.io/olml89/telegram-userbot-dev:ci \
            composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Save workspace
        uses: actions/upload-artifact@v4
        with:
          name: source-code
          path: .

  phpunit:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: .

      - name: Login to GHCR
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Run unit tests (phpunit)
        run: |
          docker run --rm \
            -e APP_ENV=ci \
            -v ${{ github.workspace }}:/telegram-userbot \
            -w /telegram-userbot/dev \
            ghcr.io/olml89/telegram-userbot-dev:latest \
            sh phpunit/phpunit.sh --ci

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  phpstan:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: .

      - name: Login to GHCR
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Run static code analysis (phpstan)
        run: |
          docker run --rm \
            -e APP_ENV=ci \
            -v ${{ github.workspace }}:/telegram-userbot \
            -w /telegram-userbot/dev \
            ghcr.io/olml89/telegram-userbot-dev:latest \
            sh phpstan/phpstan.sh --ci

  pint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: .

      - name: Login to GHCR
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Run code linting (pint)
        run: |
          docker run --rm \
            -e APP_ENV=ci \
            -v ${{ github.workspace }}:/telegram-userbot \
            -w /telegram-userbot/dev \
            ghcr.io/olml89/telegram-userbot-dev:latest \
            sh pint/pint.sh --test
